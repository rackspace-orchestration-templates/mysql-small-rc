heat_template_version: 2015-10-15

description: |
 #### Production - RCv3
 Multiple Linux servers with [MySQL 5.6](http://www.mysql.com/) and
 local database backups configured on the Master node with
 [Holland](https://github.com/holland-backup/holland#readme).
 This template is compatible with RackConnect version 3
parameter_groups:
  - label: MySQL Settings
    parameters:
    - mysql_user
    - mysql_database
  - label: RackConnect Settings
    parameters:
    - rc_network_name
  - label: rax-dev-params
    parameters:
    - server_image
    - secondary_template
    - ansible_source
parameters:
  #MySQL Customization
  #Advanced Options
  server_image:
    type: string
    default: f4bbbce2-50b0-4b07-bf09-96c175a45f4b
    label: Server Image
    description: Image to be used for all servers in this stack
    constraints:
    - allowed_values:
      - f4bbbce2-50b0-4b07-bf09-96c175a45f4b
  mysql_user:
    type: string
    default: mysql_user
    label: MySQL User
    description: User to create within MySQL
  mysql_database:
    type: string
    default: mysql_db
    label: MySQL Database
    description: Database to create within MySQL.  User defined in "MySQL User" will have full access to this database
  rc_network_name:
    type: string
    label: RackConnect Network
    description: Name or UUID of RackConnected network to attach this server to
    constraints:
    - custom_constraint: rackconnect.network
  server_flavor:
    type: string
    default: 4 GB General Purpose v1
    label: Server Flavor
    description: Flavor of Cloud Server to be used for all servers in this stack
    constraints:
    - allowed_values:
      - 1 GB General Purpose v1
      - 2 GB General Purpose v1
      - 4 GB General Purpose v1
      - 8 GB General Purpose v1
  server_count:
    type: number
    default: 0
    label: Number of Secondary Servers
    description: Number of secondary web nodes
    constraints:
      - range: { min: 0, max: 10 }
  secondary_template:
    type: string
    default: http://catalog.rs-heat.com/mysql-small-rc/mysql-small-rc-secondary.yaml
    label: Secondary Template
    description: Template to use for secondary servers
    immutable: true
  ansible_source:
    type: string
    default: http://catalog.rs-heat.com/ansible-roles/ansible-roles.tar.gz
    label: Ansible Tarball
    description: The Ansible Roles will be pulled from the location provided
    immutable: true
resources:
  #Passwords
  root_pass:
    type: OS::Heat::RandomString
  holland_pass:
    type: OS::Heat::RandomString
  mysql_pass:
    type: OS::Heat::RandomString
  slave_pass:
    type: OS::Heat::RandomString
  #SSH Key
  ssh_key:
    type: OS::Nova::KeyPair
    properties:
      name: { get_param: "OS::stack_id" }
      save_private_key: true
  #Software Configurations
  upload_role_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      outputs:
      - name: results
      config:
        str_replace:
          template: |
            #!/bin/bash
            set -e
            mkdir -p /etc/ansible/roles
            wget ansible_source -O /tmp/ansible-roles.tar.gz 2>&1
            tar -xf /tmp/ansible-roles.tar.gz --strip-components=1 -C /etc/ansible/roles
          params:
            ansible_source: { get_param: ansible_source }
  mysql_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      config: |
        ---
        - name: Install and configure LAMP
          hosts: localhost
          connection: local
          roles:
          - common
          - mysql
          - holland
  other_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:
      - default: "[]"
        name: lsync_dirs
        type: CommaDelimitedList
      - default: "[]"
        name: lsync_servers
        type: CommaDelimitedList
      - default: "[]"
        name: firewall_nodes
        type: CommaDelimitedList
      - default: "[]"
        name: firewall_node_rules
        type: CommaDelimitedList
      config: |
        ---
        - name: Install and configure other things
          hosts: localhost
          connection: local
          roles:
          - firewall
  deploy_roles:
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: TEMP_URL_SIGNAL
      config:
        get_resource: upload_role_config
      server:
        get_resource: mysql_server
  deploy_mysql:
    type: OS::Heat::SoftwareDeployment
    depends_on: deploy_roles
    properties:
      signal_transport: TEMP_URL_SIGNAL
      input_values:
        tz: "America/Chicago"
        holland_mysql_user: "holland"
        holland_mysql_password: {  get_attr: [holland_pass, value] }
        holland_mysql_host: "localhost"
        holland_create_user: "no"
        mysql_default_user: { get_param: mysql_user }
        mysql_default_user_password: { get_attr: [mysql_pass, value] }
        mysql_default_database: { get_param: mysql_database }
        mysql_role: master
        mysql_root_password: { get_attr: [root_pass, value] }
        mysql_slave_user: mysql_slave
        mysql_slave_password: { get_attr: [slave_pass, value] }
        mysql_slave_nodes: { get_attr: [mysql_secondary, rc_ip] }
      config:
        get_resource: mysql_config
      server:
        get_resource: mysql_server
  other_mysql:
    type: OS::Heat::SoftwareDeployment
    depends_on: deploy_roles
    properties:
      signal_transport: TEMP_URL_SIGNAL
      input_values:
        firewall_global_rules: [ "0.0.0.0,0,22,tcp", "0.0.0.0,0,3306,tcp"]
        firewall_nodes: { get_attr: [mysql_secondary, rc_ip] }
        firewall_node_rules: ["32,3306,tcp"]
      config:
        get_resource: other_config
      server:
        get_resource: mysql_server
  #Master Server
  mysql_server:
    type: OS::Nova::Server
    properties:
      name: { get_param: "OS::stack_name" }
#      image: { get_param: server_image }
      image: f4bbbce2-50b0-4b07-bf09-96c175a45f4b
      flavor: { get_param: server_flavor }
      key_name: { get_resource: ssh_key }
      software_config_transport: POLL_TEMP_URL
      config_drive: true
      user_data_format: SOFTWARE_CONFIG
      networks:
      - network: { get_param: rc_network_name }
      - network: 11111111-1111-1111-1111-111111111111
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        build_config: "backup_agent_only,monitoring_defaults"
  mysql_server_public_ip:
    type: Rackspace::RackConnect::PublicIP
    depends_on:
    - mysql_server
    properties:
      server_id: { get_resource: mysql_server }
  #Secondary Server
  mysql_secondary:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: server_count }
      resource_def:
#        type: https://raw.githubusercontent.com/rackspace-orchestration-templates/mysql-small-rc/master/mysql-small-rc-secondary.yaml
        type: https://raw.githubusercontent.com/chrishultin/ansible-templates/master/mysql-small-rc-secondary.yaml
        properties:
          ssh_key: { get_resource: ssh_key }
          parent_stack_id: { get_param: "OS::stack_id" }
#          server_image: { get_param: server_image }
          server_image: f4bbbce2-50b0-4b07-bf09-96c175a45f4b
          server_flavor: { get_param: server_flavor }
          server_name:
            str_replace:
              template: stack-secondary-%index%
              params:
                stack: { get_param: "OS::stack_name" }
          mysql_slave_master: { get_attr: [mysql_server, networks, { get_param: rc_network_name }, 0] }
          mysql_node_index: "%index%"
          mysql_root_password: { get_attr: [root_pass, value] }
          mysql_slave_user: mysql_slave
          mysql_slave_password: { get_attr: [slave_pass, value] }
          mysql_role: slave
          rc_network_name: { get_param: rc_network_name }

outputs:
  mysql_public_ip:
    description: Server Public IP
    value:
      get_attr: [mysql_server, accessIPv4]
  mysql_password:
    description: MySQL Root Password
    value:
      get_attr: [root_pass, value]
  mysql_user_password:
    description: MySQL Password
    value:
      get_attr: [mysql_pass, value]
  mysql_user:
    description: MySQL User
    value:
      get_param: mysql_user
  ssh_private_key:
    description: SSH Private Key
    value:
      get_attr: [ssh_key, private_key]
  secondary_ips:
    description: Secondary Node IPs
    value:
      get_attr: [mysql_secondary, public_ip]
